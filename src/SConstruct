import os
import commands

CacheDir("/tmp/build-cache/nfp")

def git_commit():
    return  commands.getoutput("git describe --tags --long --dirty --abbrev=4")


ALL_FLAGS = dict()

MODE = (ARGUMENTS.get('release', 0) == '1') and 'release' or 'debug'
I686 = (ARGUMENTS.get('arch', '64') == '32')
PROFILING = (ARGUMENTS.get('prof', 0) == '1')

if os.getenv("CXX") not in ("", None):
    ALL_FLAGS['CXX'] = os.getenv("CXX")
if os.getenv("CC") not in ("", None):
    ALL_FLAGS['CC'] = os.getenv("CC")

# Seems like we know everything we need, giving some feedback abour the compilation
print
print "+" + "-" * (7 + 8 + 1) + "+"
print "| MODE: %8s |" % MODE
print "| ARCH: %8s |" % (I686 and "32b" or "64b")
print "| PROF: %8s |" % PROFILING
print "+" + "-" * (7 + 8 + 1) + "+"
print


BASE_CPPFLAGS = ['-pipe',
                 '-combine',
                 '-ansi',
                 '-Wall',
                 '-fno-strict-aliasing',
                 '-DBUILD__GIT=%s' % git_commit(),
                 '-DBUILD__MODE=%s' % MODE,
                 '-DBUILD__PROF=%s' % PROFILING,
                 '-DBUILD__ARCH=%s' % (I686 and "32b" or "64b"),
                 '-std=c++0x']

if I686:
    BASE_CPPFLAGS += ['-m32',]

ADD_CPPFLAGS = dict()
ADD_CPPFLAGS['release'] = ['-O3', '-DNDEBUG',]

# Tried various flags like -march=pentium4 or -march=core2
# both seem to be giving pretty bad results...
# That might need more testing though...
ADD_CPPFLAGS['debug'] = ['-fno-omit-frame-pointer',
                         '-fno-inline-functions',
                         '-fno-inline-functions-called-once',
                         '-fno-optimize-sibling-calls',
                         '-fno-default-inline',
                         '-fno-inline',
                         '-g',
                         '-D_GLIBCXX_PROFILE']
ADD_CPPFLAGS['prof'] = ['-pg',]

BASE_LINKFLAGS = I686 and ['-m32',] or ['-m64',]

ADD_LINKFLAGS = dict()
ADD_LINKFLAGS['release'] = []
ADD_LINKFLAGS['debug'] = []
ADD_LINKFLAGS['prof'] = ['-pg',]

ALL_FLAGS['LINKFLAGS'] = BASE_LINKFLAGS + ADD_LINKFLAGS[MODE]
ALL_FLAGS['CPPFLAGS'] =  BASE_CPPFLAGS + ADD_CPPFLAGS[MODE]

if PROFILING:
   ALL_FLAGS['LINKFLAGS'] += ADD_LINKFLAGS['prof']
   ALL_FLAGS['CPPFLAGS'] +=  ADD_CPPFLAGS['prof']

ALL_FLAGS['LIBS'] = ['QtCore', 'glog']

ALL_FLAGS['LIBPATH'] = ['/usr/local/lib64',
                        '/Users/nico/projects/dev/nfp/src/core',
                        '/Users/nico/projects/dev/nfp/src/algos']

ALL_FLAGS['CPPPATH'] = ["/Library/Frameworks/QtCore.framework/Headers",
                        "/Users/nico/projects/dev/nfp/src/core",
                        "/Users/nico/projects/dev/nfp/src/algos"]

ALL_FLAGS['ENV'] = {'PATH': os.getenv('PATH'),
                    'TERM': os.getenv('TERM'),
                    'HOME': os.getenv('HOME')}

env = Environment(**ALL_FLAGS)

Export('env')

SConscript(['core/SConscript',
            'algos/SConscript',
            'app/SConscript',])
	    #'python/SConscript'])
