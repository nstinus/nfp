import os

ALL_FLAGS = dict()

MODE = (ARGUMENTS.get('release') == '1') and 'release' or 'debug'
# By default, we'll compile in 32b as 64b seems to freeze apps
# probably something wrong with types/pointers used...
I686 = (ARGUMENTS.get('arch') != '64')
PROFILING = (ARGUMENTS.get('prof', 0) == '1')

if os.getenv("CXX") not in ("", None):
    ALL_FLAGS['CXX'] = os.getenv("CXX")
if os.getenv("CC") not in ("", None):
    ALL_FLAGS['CC'] = os.getenv("CC")

# Seems like we know everything we need, giving some feedback abour the compilation
print
print "+" + "-" * (7 + 8 + 1) + "+"
print "| MODE: %8s |" % MODE
print "| ARCH: %8s |" % (I686 and "32b" or "64b")
print "| PROF: %8s |" % PROFILING
print "+" + "-" * (7 + 8 + 1) + "+"
print


BASE_CPPFLAGS = ['-pipe',
                 '-combine',
                 '-ansi',
                 '-Wall',
                 '-fno-strict-aliasing']

if I686:
    BASE_CPPFLAGS += ['-m32',]

ADD_CPPFLAGS = dict()
ADD_CPPFLAGS['release'] = ['-O3', '-DNDEBUG',]

# Tried various flags like -march=pentium4 or -march=core2
# both seem to be giving pretty bad results...
# That might need more testing though...
ADD_CPPFLAGS['debug'] = ['-fno-omit-frame-pointer',
                         '-fno-inline-functions',
                         '-fno-inline-functions-called-once',
                         '-fno-optimize-sibling-calls',
                         '-fno-default-inline',
                         '-fno-inline',
                         '-D_GLIBCXX_PROFILE']
ADD_CPPFLAGS['prof'] = ['-g', '-pg']

if I686:
   BASE_LINKFLAGS = ['-m32',]
else:
   BASE_LINKFLAGS = ['-m64', '-L/usr/local/lib64']
ADD_LINKFLAGS = dict()
ADD_LINKFLAGS['release'] = []
ADD_LINKFLAGS['debug'] = []
ADD_LINKFLAGS['prof'] = ['-pg',]

ALL_FLAGS['LINKFLAGS'] = BASE_LINKFLAGS + ADD_LINKFLAGS[MODE]
ALL_FLAGS['CPPFLAGS'] =  BASE_CPPFLAGS + ADD_CPPFLAGS[MODE]

if PROFILING:
   ALL_FLAGS['LINKFLAGS'] += ADD_LINKFLAGS['prof']
   ALL_FLAGS['CPPFLAGS'] +=  ADD_CPPFLAGS['prof']

ALL_FLAGS['LIBS'] = ['QtCore', 'glog']

env = Environment(**ALL_FLAGS)

Export('env')

SConscript([#'core/SConscript',
            #'algos/SConscript',
            'app/SConscript',])
	    #'python/SConscript'])
